class ArmstrongThread extends Thread {
    private final int limit;
    public ArmstrongThread(int limit) {
        this.limit = limit;
    }
    public void run() {
        System.out.println("ArmstrongThread started");
        for (int i = 1; i <= limit; i++) {
            if (isArmstrong(i)) {
                System.out.println("Armstrong number: " + i);
            }
        }
        System.out.println("ArmstrongThread completed");
    }
    private boolean isArmstrong(int num) {
        int originalNum, remainder, result = 0, n = 0;
        originalNum = num;
        while (originalNum != 0) {
            originalNum /= 10;
            ++n;
        }
        originalNum = num;
        while (originalNum != 0) {
            remainder = originalNum % 10;
            result += Math.pow(remainder, n);
            originalNum /= 10;
        }
        return result == num;
    }
}
class FibonacciThread extends Thread {
    private final int limit;
    public FibonacciThread(int limit) {
        this.limit = limit;
    }
    public void run() {
        System.out.println("FibonacciThread started");
        int a = 0, b = 1;
        System.out.println("Fibonacci series:");
        System.out.print(a + " " + b + " ");
        for (int i = 2; i < limit; i++) {
            int c = a + b;
            System.out.print(c + " ");
            a = b;
            b = c;
        }
        System.out.println("\nFibonacciThread completed");
    }
}
public class Main {
    public static void main(String[] args) {
        ArmstrongThread armstrongThread = new ArmstrongThread(1000);
        FibonacciThread fibonacciThread = new FibonacciThread(10);
        System.out.println("Main thread started");
        armstrongThread.start();
        fibonacciThread.start();
        System.out.println("Main thread completed");
    }
}

OUTPUT:
Main thread started
Main thread completed
ArmstrongThread started
FibonacciThread started
Fibonacci series:
Armstrong number: 1
Armstrong number: 2
Armstrong number: 3
Armstrong number: 4
Armstrong number: 5
Armstrong number: 6
Armstrong number: 7
Armstrong number: 8
Armstrong number: 9
Armstrong number: 153
Armstrong number: 370
Armstrong number: 371
Armstrong number: 407
ArmstrongThread completed
0 1 1 2 3 5 8 13 21 34 
FibonacciThread completed
